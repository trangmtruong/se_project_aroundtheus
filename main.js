!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class t{constructor(e,t,s,i,r,n){this._data=e,this._name=e.name,this._link=e.link,this._handleImageClick=s,this._handleDeleteClick=i,this._cardSelector=t,this.isLiked=e.isLiked,this._id=e._id,this._handleUnlikingIcon=r,this._handleLikingIcon=n}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{!0===this.isLiked?this._handleUnlikingIcon(this):this._handleLikingIcon(this)})),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_setLikeState(){!0===this.isLiked?this.fillInLikeIcon():this.clearLikeIcon()}fillInLikeIcon(){this._likeButton.classList.add("card__like-button_active")}clearLikeIcon(){this._likeButton.classList.remove("card__like-button_active")}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._setLikeState(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._formEl=document.querySelector(t),this._config=e,this._inputSelector=e.inputSelector,this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasValidInput(){return this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._hasValidInput()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class i{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target!==this._closeButton&&e.target!==this._popupElement||this.close()}))}}class r extends i{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=[...this._popupElement.querySelectorAll(".modal__input")],this._popupForm.querySelector(".modal__button"),this._submitBtnText=this._submitBtnText.textContent,this.setEventListeners()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtnText.textContent=e?t:this._submitBtnText}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){for(let t=0;t<e.length;t++)this._inputEls[t].value=e[t]}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const n=document.querySelector("#profile-edit-button"),a=document.querySelector("#add-card-modal").querySelector(".modal__form"),o=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__edit-avatar-button"),d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUsersInfo(){this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}updateProfileInfo(e){let{title:t,description:s}=e;this._request(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}updateAvatar(e){this._request(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}createCard(e){let{name:t,link:s}=e;this._request(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:s})})}likeCard(e){this._request(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"})}dislikeCard(e){this._request(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"})}deleteCard(e){this._request(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"5f364a70-6354-4d7f-b3e1-21a8fcface2d","Content-Type":"application/json"}}),c=new s(e,"#profile-edit-form"),h=new s(e,"#add-card-form"),_=new s(e,"#edit-avatar-form"),u=new r("#profile-edit-modal",(function(e){u.renderLoading(!0),d.updateProfileInfo(e).then((t=>{f.setUserInfo(e.title,e.description),u.close()})).catch((e=>{console.error(e),alert(`${e}. Failed to update profile info :(`)})).finally((()=>{u.renderLoading(!1)}))})),m=new r("#add-card-modal",(function(e){m.renderLoading(!0),d.createCard(e).then((e=>{g.addItem(e),m.close(),a.reset(),h.resetValidation()})).catch((e=>{console.error(e),alert(`${e}. Failed to add new card :(`)})).finally((()=>{m.renderLoading(!1)}))})),p=new r("#edit-avatar-modal",(function(e){p.renderLoading(!0),d.updateAvatar(e.link).then((e=>{f.setUserAvatar(e.avatar),p.close()})).catch((e=>{console.error(e),alert(`${e}. Failed to edit avatar :(`)})).finally((()=>{p.renderLoading(!1)}))})),E=new class extends i{constructor(e){super(e),this._imageEl=this._popupElement.querySelector(".modal__image"),this._captionEl=this._popupElement.querySelector(".modal__preview-title"),this.setEventListeners()}open(e,t){this._imageEl.src=t,this._imageEl.alt=e,this._captionEl.textContent=e,super.open()}}("#preview-image-modal"),v=new class extends i{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this.setEventListeners()}setSubmitHandler(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-confirmation-modal"),f=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarEl=document.querySelector(i)}getUserInfo(){return{name:this._nameEl.textContent,job:this._jobEl.textContent}}setUserInfo(e,t){this._nameEl.textContent=e,this._jobEl.textContent=t}setUserAvatar(e){this._avatarEl.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"});function b(e){E.open(e.name,e.link)}function L(e){d.likeCard(e._id).then((()=>{e.fillInLikeIcon(),e.isLiked=!1})).catch((e=>{console.error(e),alert(`${e}. Failed to like card :(`)}))}function S(e){d.dislikeCard(e._id).then((()=>{e.clearLikeIcon(),e.isLiked=!0})).catch((e=>{console.error(e),alert(`${e}. Failed to unlike card :(`)}))}function k(e){v.open(),v.setSubmitHandler((function(){d.deleteCard(e._id).then((()=>{v.close(),e.handleDeleteCard()})).catch((e=>{console.error(e),alert(`${e}. Failed to delete card :(`)}))}))}n.addEventListener("click",(()=>{const e=f.getUserInfo(),t=[e.name,e.job];u.setInputValues(t),c.resetValidation(),u.open()})),l.addEventListener("click",(()=>{p.open()})),o.addEventListener("click",(()=>m.open())),c.enableValidation(),h.enableValidation(),_.enableValidation();const g=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){const t=this._renderer(e);this._container.prepend(t)}renderItems(){this._items.forEach((e=>{this.addItem(e)}))}setItems(e){this._items=e}}({items:[],renderer:function(e){return new t(e,"#card-template",b,k,S,L).getCardElement()}},".cards__list");d.getInitialCards().then((e=>{g.setItems(e.reverse()),g.renderItems()})).catch((e=>{console.error(e),alert(`${e}. Failed to load cards :(`)})),d.getUsersInfo().then((e=>{f.setUserAvatar(e.avatar),f.setUserInfo(e.name,e.about)})).catch((e=>{console.error(e),alert(`${e}. Failed to get user info :(`)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,